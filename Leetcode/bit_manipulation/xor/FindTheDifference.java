package bit_manipulation.xor;

import java.util.HashMap;
import java.util.Map;

/*
https://leetcode.com/problems/find-the-difference/description/

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.



Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"


Tags: XOR , bit_maniputaion
 */

/* https://www.loginradius.com/blog/engineering/how-does-bitwise-xor-work/
* https://www.quora.com/What-are-some-applications-of-the-XOR-bitwise-operator-in-programming
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR
*/

class FindTheDifferenceUsingXOR {
    public char findTheDifference(String s, String t) {
        final int len = s.length();
        char addedLetter = t.charAt(len);

        for(int i = 0 ; i < len ; i++)
            addedLetter ^= (s.charAt(i) ^ t.charAt(i));

        return addedLetter;
    }
}

// own solution
public class FindTheDifference {
    public char findTheDifference(String s, String t) {
        // own solution
        Map<Character, Integer> records = new HashMap<>();
        for(int i = 0 ; i < s.length() ; i++) {
            if(records.containsKey(s.charAt(i))) {
                records.put(s.charAt(i), records.get(s.charAt(i)) + 1);
            }
            else {
                records.put(s.charAt(i), 1);
            }
        }

        Character extra = null;

        for(int i = 0 ; i < t.length() ; i++) {
            if(records.containsKey(t.charAt(i))) {
                if(records.get(t.charAt(i)) == 0) {
                    extra = t.charAt(i);
                    break;
                }
                records.put(t.charAt(i), records.get(t.charAt(i))-1);
            }
            else {
                extra = t.charAt(i);
                break;
            }
        }
        return extra;
    }
}
